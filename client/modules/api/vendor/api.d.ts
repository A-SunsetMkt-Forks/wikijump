/**
 * This file was auto-generated by openapi-typescript. Do not make direct
 * changes to the file.
 */

export interface paths {
  "/query": {
    /** INCOMPLETE - STUB */
    post: operations["queryRequest"]
  }
  "/util/resolveid/{id}": {
    /** Resolves an ID and returns what type of object it refers to. */
    get: operations["utilResolveID"]
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
  }
  "/auth/login": {
    /** Logs in a user. */
    post: operations["authLogin"]
  }
  "/auth/logout": {
    /** Logs the client out. */
    delete: operations["authLogout"]
  }
  "/auth/check": {
    /** Gets the authentication state of the client. */
    post: operations["authCheck"]
  }
  "/auth/refresh": {
    /** Refreshes the client's access token. */
    post: operations["authRefresh"]
  }
  "/account/register": {
    /**
     * Registers an account. Does not automatically login. Email validation
     * will be required.
     */
    post: operations["accountRegister"]
  }
  "/account/request-deletion": {
    /**
     * Starts the deletion process for an account. Requires additional
     * email validation for the process to complete.
     */
    post: operations["accountRequestDeletion"]
  }
  "/account/start-recovery": {
    /** Starts the password recovery routine. */
    post: operations["accountStartRecovery"]
  }
  "/account/email": {
    /** Gets the current email address. */
    get: operations["accountGetEmail"]
    /**
     * Updates the current email address. Does not immediately change the
     * email, as the change must be verified through a link that is sent to
     * the requested email.
     */
    put: operations["accountUpdateEmail"]
  }
  "/account/password": {
    /** Updates the current password. */
    put: operations["accountUpdatePassword"]
  }
  "/account/username": {
    /** Gets the current username. */
    get: operations["accountGetUsername"]
    /** Updates the current username. */
    put: operations["accountUpdateUsername"]
  }
  "/account/settings": {
    /** Gets the current account settings. */
    get: operations["accountGetSettings"]
    /** Update (patch) the client's user details. */
    patch: operations["accountUpdateSettings"]
  }
  "/notification": {
    /** Gets the client's current notifications. */
    get: operations["notificationGet"]
    /** Dismisses all of the client's notifications. */
    delete: operations["notificationDismissAll"]
  }
  "/user": {
    /** Gets the client's user details. */
    get: operations["userClientGet"]
    /** Update (patch) the client's user details. */
    patch: operations["userClientUpdateProfile"]
  }
  "/user/avatar": {
    /** Gets the client's avatar. */
    get: operations["userClientGetAvatar"]
    /** Sets the client's avatar. */
    put: operations["userClientSetAvatar"]
    /** Removes the client's avatar. */
    delete: operations["userClientRemoveAvatar"]
  }
  "/user/blocked": {
    /** Gets the list of users the client has blocked. */
    get: operations["userClientGetBlocked"]
  }
  "/user/{path_type}/{path}": {
    /** Gets a user's details. */
    get: operations["userGet"]
    /**
     * Resets a user's profile.
     *
     * This endpoint is only available to platform administrators.
     */
    delete: operations["userResetProfile"]
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
  }
  "/user/{path_type}/{path}/avatar": {
    /** Gets a user's avatar. */
    get: operations["userGetAvatar"]
    /**
     * Removes a user's avatar.
     *
     * This endpoint is only available to platform administrators.
     */
    delete: operations["userRemoveAvatar"]
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
  }
  "/user/{path_type}/{path}/block": {
    /** Gets whether or not the client has a user blocked. */
    get: operations["userGetBlocked"]
    /** Updates whether or not the client has a user blocked. */
    put: operations["userUpdateBlocked"]
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
  }
  "/membership": {
    /** Gets the sites the client is a member of. */
    get: operations["membershipGetList"]
  }
  "/membership/applications": {
    /** Gets the sites the client has requested to join. */
    get: operations["membershipGetApplications"]
  }
  "/membership/invites": {
    /** Gets the sites the client has been invited to join. */
    get: operations["membershipGetInvites"]
  }
  "/membership/site/{site}": {
    /** Gets the client membership status for a site. */
    get: operations["membershipSiteGet"]
    /** Requests to join a site (application). */
    post: operations["membershipSiteApply"]
    /** Leaves a site. */
    delete: operations["membershipSiteLeave"]
    parameters: {
      path: {
        site: string
      }
    }
  }
  "/member/{path_type}/{path}/membership": {
    /** Gets the sites a user is a member of. */
    get: operations["membershipUserGetList"]
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
  }
  "/member/{path_type}/{path}/membership/{site}": {
    /** Gets a user's membership status for a site. */
    get: operations["membershipUserSiteGet"]
    parameters: {
      path: {
        site: string
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
  }
  "/member/{path_type}/{path}/role": {
    /** Gets the role of a user. */
    get: operations["membershipUserGetRole"]
    /** Sets the role of a user. */
    post: operations["membershipUserSetRole"]
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
  }
  "/member/{path_type}/{path}/invite": {
    /** Invites a user to join a site. */
    post: operations["membershipUserInvite"]
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
  }
  "/page": {
    /** Creates a new page. */
    post: operations["pageCreate"]
  }
  "/page/{path_type}/{path}": {
    /** Gets a page. */
    get: operations["pageGet"]
    /** Deletes a page. */
    delete: operations["pageDelete"]
    /** Updates a page. */
    patch: operations["pageUpdate"]
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
    }
  }
  "/page/id/{path}/restore": {
    /** Restores a previously deleted page. */
    post: operations["pageRestore"]
    parameters: {
      path: {
        /** Specifies the ID to be used to identify a page. */
        path: components["schemas"]["Reference"]
      }
    }
  }
  "/page/{path_type}/{path}/rename": {
    /** Changes the path/slug/name of a page. */
    post: operations["pageRename"]
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
    }
  }
  "/page/{path_type}/{path}/revision": {
    /** Gets the update/revision history of a page. */
    get: operations["revisionPageGetHistory"]
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
      query: {
        /** Specifies which page a paginated response should return. */
        cursor?: components["parameters"]["Cursor"]
        /**
         * Specifies how many entries a paginated response should return in
         * a single page.
         */
        limit?: components["parameters"]["Limit"]
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
  }
  "/page/{path_type}/{path}/revision/{revision}": {
    /** Gets the page corresponding to a revision. */
    get: operations["revisionGet"]
    /** Resets a page to a past revision. */
    post: operations["revisionResetToRevision"]
    /** Updates the metadata of a revision. */
    patch: operations["revisionUpdateMetadata"]
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
        revision: number
      }
    }
  }
  "/page/{path_type}/{path}/tags": {
    /** Gets the tags of a page. */
    get: operations["tagPageGet"]
    /** Updates the tags of a page. */
    put: operations["tagPageUpdate"]
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
    }
  }
  "/page/{path_type}/{path}/score": {
    /** Gets the score of a page. */
    get: operations["votePageGetScore"]
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
    }
  }
  "/page/{path_type}/{path}/voters": {
    /** Gets the voters and votes of a page. */
    get: operations["votePageGetVoters"]
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
      query: {
        /** Specifies which page a paginated response should return. */
        cursor?: components["parameters"]["Cursor"]
        /**
         * Specifies how many entries a paginated response should return in
         * a single page.
         */
        limit?: components["parameters"]["Limit"]
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
  }
  "/page/{path_type}/{path}/vote": {
    /** Gets the client's voting state on a page, if any. */
    get: operations["votePageGet"]
    /** Updates/sets the client's voting state on a page. */
    put: operations["votePageUpdateVote"]
    /** Removes the client's voting state on a page. */
    delete: operations["votePageRemoveVote"]
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
    }
  }
  "/page/{path_type}/{path}/file": {
    /** Gets metadata on all files attached to a page. */
    get: operations["filePageGetMetadata"]
    /** Adds a new file to a page. */
    post: operations["filePageAdd"]
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
    }
  }
  "/file": {
    /**
     * Gets metadata on the files attached directly to the site instance.
     *
     * This does not include files attached to *pages*.
     */
    get: operations["fileSiteGetMetadata"]
    /** Adds a new file to a site instance. */
    post: operations["fileSiteAdd"]
  }
  "/file/{id}": {
    /** Gets a file. */
    get: operations["fileGet"]
    /** Deletes a file. */
    delete: operations["fileDelete"]
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
  }
  "/file/metadata": {
    /** Gets the site's file-system metadata, e.g. remaining file space. */
    get: operations["fileGetSiteMetadata"]
  }
  "/file/{id}/metadata": {
    /** Gets a file's metadata. */
    get: operations["fileGetMetadata"]
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
  }
  "/user/{path_type}/{path}/report": {
    /** Gets the reports against a user. */
    get: operations["reportUserGet"]
    /** Reports a user. */
    post: operations["reportUserSend"]
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
  }
  "/page/{path_type}/{path}/report": {
    /** Gets a page's reports. */
    get: operations["reportPageGet"]
    /** Reports a page. */
    post: operations["reportPageSend"]
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
    }
  }
  "/report/{id}": {
    /** Gets a report. */
    get: operations["reportGet"]
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
  }
  "/abuse": {
    /**
     * Gets the reports against a site.
     *
     * This endpoint is only available to platform administrators.
     */
    get: operations["abuseSiteGet"]
    /** Reports a site. */
    post: operations["abuseSiteSend"]
  }
  "/user/{path_type}/{path}/abuse": {
    /**
     * Gets the reports against a user.
     *
     * This endpoint is only available to platform administrators.
     */
    get: operations["abuseUserGet"]
    /** Reports a user. */
    post: operations["abuseUserSend"]
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
  }
  "/page/{path_type}/{path}/abuse": {
    /**
     * Gets a page's reports.
     *
     * This endpoint is only available to platform administrators.
     */
    get: operations["abusePageGet"]
    /** Reports a page. */
    post: operations["abusePageSend"]
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
    }
  }
  "/abuse/{id}": {
    /**
     * Gets a report.
     *
     * This endpoint is only available to platform administrators.
     */
    get: operations["abuseGet"]
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
  }
  "/message": {
    /** Gets all of the client's messages. */
    get: operations["messageGetList"]
    parameters: {
      query: {
        /** Specifies which page a paginated response should return. */
        cursor?: components["parameters"]["Cursor"]
        /**
         * Specifies how many entries a paginated response should return in
         * a single page.
         */
        limit?: components["parameters"]["Limit"]
        /** Specifies the level of detail requested for a message. */
        detail?: components["parameters"]["MessageDetail"]
      }
    }
  }
  "/message/{id}": {
    /** Gets a message. */
    get: operations["messageGet"]
    /** Deletes a message. */
    delete: operations["messageDelete"]
    /** Updates the metadata of a message, such as read or unread. */
    patch: operations["messageUpdate"]
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
  }
  "/user/{path_type}/{path}/message": {
    /** Messages a user. */
    post: operations["messageSend"]
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
  }
  "/forum": {
    /** Gets the groups and categories of a forum. */
    get: operations["forumGet"]
    parameters: {
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
  }
  "/forum/group": {
    /** Gets the groups of a forum. */
    get: operations["forumGroupGetList"]
    parameters: {
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
  }
  "/forum/group/{id}": {
    /** Gets a group. */
    get: operations["forumGroupGet"]
    /** Creates a new category inside of a group. */
    post: operations["forumGroupAddCategory"]
    /** Deletes a group. */
    delete: operations["forumGroupDelete"]
    /** Updates a group. */
    patch: operations["forumGroupUpdate"]
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
  }
  "/forum/group/{id}/categories": {
    /** Gets the categories of a group. */
    get: operations["forumGroupGetCategories"]
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
  }
  "/forum/category": {
    /** Gets the categories of a forum. */
    get: operations["forumCategoryGetList"]
    parameters: {
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
  }
  "/forum/category/{id}": {
    /** Gets a category. */
    get: operations["forumCategoryGet"]
    /** Creates a new thread inside of a category. */
    post: operations["forumCategoryAddThread"]
    /** Deletes a category. */
    delete: operations["forumCategoryDelete"]
    /** Updates a category. */
    patch: operations["forumCategoryUpdate"]
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
  }
  "/forum/category/{id}/threads": {
    /** Gets the threads of a category. */
    get: operations["forumCategoryGetThreads"]
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
      query: {
        /** Specifies which page a paginated response should return. */
        cursor?: components["parameters"]["Cursor"]
        /**
         * Specifies how many entries a paginated response should return in
         * a single page.
         */
        limit?: components["parameters"]["Limit"]
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
  }
  "/forum/thread/{id}": {
    /** Gets a thread. */
    get: operations["forumThreadGet"]
    /** Creates a new post inside of a thread. */
    post: operations["forumThreadAddPost"]
    /** Deletes a thread. */
    delete: operations["forumThreadDelete"]
    /** Updates a thread. */
    patch: operations["forumThreadUpdate"]
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
  }
  "/forum/thread/{id}/posts": {
    /** Gets the posts of a thread. */
    get: operations["forumThreadGetPosts"]
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
      query: {
        /** Specifies which page a paginated response should return. */
        cursor?: components["parameters"]["Cursor"]
        /**
         * Specifies how many entries a paginated response should return in
         * a single page.
         */
        limit?: components["parameters"]["Limit"]
        /** Specifies the level of detail desired for a requested post. */
        detail?: components["parameters"]["ForumPostDetail"]
        /**
         * Specifies the maximum number of replies (sub-posts) included
         * with any retrieved post.
         */
        depth?: components["parameters"]["ForumReplyDepth"]
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
  }
  "/forum/post/{id}": {
    /** Gets a post. */
    get: operations["forumPostGet"]
    /** Replies to a post with another post. */
    post: operations["forumPostReply"]
    /** Deletes a post. */
    delete: operations["forumPostDelete"]
    /** Updates a post. */
    patch: operations["forumPostUpdate"]
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
  }
  "/forum/post/{id}/replies": {
    /** Gets the replies to a post. */
    get: operations["forumPostGetReplies"]
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
      query: {
        /** Specifies which page a paginated response should return. */
        cursor?: components["parameters"]["Cursor"]
        /**
         * Specifies how many entries a paginated response should return in
         * a single page.
         */
        limit?: components["parameters"]["Limit"]
        /** Specifies the level of detail desired for a requested post. */
        detail?: components["parameters"]["ForumPostDetail"]
        /**
         * Specifies the maximum number of replies (sub-posts) included
         * with any retrieved post.
         */
        depth?: components["parameters"]["ForumReplyDepth"]
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
  }
  "/forum/post/{id}/revision": {
    /** Gets the update/revision history of a post. */
    get: operations["forumPostRevisionGetHistory"]
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
      query: {
        /** Specifies which page a paginated response should return. */
        cursor?: components["parameters"]["Cursor"]
        /**
         * Specifies how many entries a paginated response should return in
         * a single page.
         */
        limit?: components["parameters"]["Limit"]
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
  }
  "/forum/post/{id}/revision/{revision}": {
    /** Gets the post corresponding to a revision. */
    get: operations["forumPostRevisionGet"]
    /** Resets a forum post to a past revision. */
    post: operations["forumPostResetToRevision"]
    /** Updates the metadata of a revision. */
    patch: operations["forumPostRevisionUpdateMetadata"]
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
        revision: number
      }
    }
  }
  "/user/{path_type}/{path}/kick": {
    /** Kicks a user from a site. */
    put: operations["moderationKick"]
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
  }
  "/moderation/banned": {
    /** Gets the list of users banned from a site. */
    get: operations["moderationBanGetList"]
  }
  "/user/{path_type}/{path}/ban": {
    /** Gets if a user is banned. */
    get: operations["moderationBanGet"]
    /** Bans a user. Providing `null` for `until` describes a perma-ban. */
    put: operations["moderationBan"]
    /** Unbans a user, if they were banned to begin with. */
    delete: operations["moderationUnban"]
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
  }
  "/category": {
    /** Gets the list of categories on a site. */
    get: operations["categoryGetList"]
  }
  "/category/default": {
    /** Gets the default category. */
    get: operations["categoryDefaultGet"]
    /** Update (patch) the default category. */
    patch: operations["categoryDefaultPatch"]
  }
  "/category/id/{id}": {
    /** Gets a category. */
    get: operations["categoryGet"]
    /** Update (patch) a category. */
    patch: operations["categoryPatch"]
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
  }
  "/site/settings": {
    /** Gets the site's settings. */
    get: operations["siteSettingsGet"]
    /** Update (patch) the site's settings. */
    patch: operations["siteSettingsPatch"]
  }
  "/site/application": {
    /** Gets the site's pending applications. */
    get: operations["siteApplicationGetList"]
    parameters: {
      query: {
        /** Specifies which page a paginated response should return. */
        cursor?: components["parameters"]["Cursor"]
        /**
         * Specifies how many entries a paginated response should return in
         * a single page.
         */
        limit?: components["parameters"]["Limit"]
      }
    }
  }
  "/site/application/{id}": {
    /** Gets an application. */
    get: operations["siteApplicationGet"]
    /** Accepts an application. */
    post: operations["siteApplicationAccept"]
    /** Rejects an application. */
    delete: operations["siteApplicationReject"]
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
  }
  "/site/backup": {
    /** Gets a backup of the site. */
    get: operations["siteBackupGet"]
  }
  "/site/create": {
    /** Creates a new site. */
    post: operations["siteCreate"]
  }
  "/site/request-deletion": {
    /**
     * Starts the deletion process for the site. Requires additional email
     * validation for the process to complete.
     */
    post: operations["siteRequestDeletion"]
  }
  "/site/clone": {
    /** Clones the current site and creates a new one. */
    post: operations["siteClone"]
  }
  "/site/notification": {
    /** Gets the site's current notifications. */
    get: operations["siteNotificationGet"]
    /** Dismisses all of the site's notifications. */
    delete: operations["siteNotificationDismissAll"]
  }
  "/site/newsletter": {
    /** Sends a site newsletter. */
    post: operations["siteNewsletterSend"]
  }
  "/site/transfer": {
    /** Transfers the site master-admin status to another user. */
    post: operations["siteTransfer"]
  }
}

export interface components {
  schemas: {
    /** Describes the pagination property present with all paginated responses. */
    Paginated: {
      pagination: {
        cursor: number
        limit: number
        pages: number
      }
    }
    ReferenceTypes:
      | "user"
      | "page"
      | "message"
      | "file"
      | "report"
      | "abuse"
      | "forum-group"
      | "forum-category"
      | "forum-thread"
      | "forum-post"
    /**
     * Describes a page *slug*, a string consisting of an optional category
     * and name. It is formatted as `category:name` if a category is
     * included. If a category is not included, it is simply `name`.
     */
    Slug: string
    SiteName: string
    Username: string
    Email: string
    /** An integer that uniquely points to a resource. */
    Reference: number
    /** A binary chunk of data representing a file. */
    File: string
    /** A base64 encoded chunk of data. */
    Base64: string
    /** A chunk of text in FTML format. */
    Wikitext: string
    /** A chunk of text in HTML format. */
    HTML: string
    LoginSpecifier: components["schemas"]["Email"] | components["schemas"]["Username"]
    /** Private account settings that can govern some of Wikijump's behavior. */
    AccountSettings: {
      acceptsInvites: boolean
      language: string
      allowMessages: "registered" | "co-members" | "nobody"
    }
    /** Private account settings that can govern some of Wikijump's behavior. */
    AccountSettingsPatch: {
      acceptsInvites?: boolean
      language?: string
      allowMessages?: "registered" | "co-members" | "nobody"
    }
    /** Describes a notification intended to inform a user of some sort of event. */
    Notification: {
      level: "trivial" | "info" | "important" | "error"
      type: "account" | "pm" | "site" | "forum" | "page" | "other"
      name: string
      source: string
      time: string
      payload: {
        message: string
      }
    }
    NotificationList: {
      notifications: components["schemas"]["Notification"][]
    }
    /** Describes a user's administrative role and membership status. */
    UserRole:
      | "guest"
      | "registered"
      | "member"
      | "moderator"
      | "admin"
      | "master-admin"
      | "platform-admin"
    /** Basic level of information needed to describe a user. */
    UserIdentity: {
      id: components["schemas"]["Reference"]
      username: components["schemas"]["Username"]
      tinyavatar: components["schemas"]["Base64"] | null
      karma: number
      role: components["schemas"]["UserRole"]
    }
    /** Describes a user in an intermediate amount of detail. */
    UserInfo: components["schemas"]["UserIdentity"] & {
      about: string
      avatar: string | null
      signature: components["schemas"]["HTML"] | null
      since: string
      lastActive: string
      blocked: boolean
    }
    /** Fully describes a user and their personalization preferences. */
    UserProfile: components["schemas"]["UserInfo"] & {
      realname: string
      pronouns: string | null
      birthday: string | null
      location: string | null
      links: { [key: string]: string }
    }
    /** Partial object that is used to update a user's profile. */
    UserProfilePatch: {
      about?: string
      signature?: components["schemas"]["Wikitext"]
      gender?: string
      birthday?: string
      location?: string
      links?: { [key: string]: string }
    }
    UserBlockedList: {
      users: components["schemas"]["UserIdentity"][]
    }
    Membership: {
      site: components["schemas"]["SiteName"]
      role: components["schemas"]["UserRole"]
    }
    MembershipList: {
      memberships: components["schemas"]["Membership"][]
    }
    MembershipRole: {
      role: "member" | "moderator" | "admin"
    }
    Application: {
      id?: components["schemas"]["Reference"]
      sender: components["schemas"]["UserIdentity"]
      message: string
      time: string
    }
    ApplicationList: components["schemas"]["Paginated"] & {
      applications: components["schemas"]["Application"][]
    }
    ApplicationSend: {
      message: string
    }
    ApplicationSendList: {
      applications: {
        site: components["schemas"]["SiteName"]
        message: string
      }[]
    }
    Invite: {
      sender: components["schemas"]["UserIdentity"]
      site: components["schemas"]["SiteName"]
      messsage?: string
      time: string
    } & {
      message: unknown
    }
    InviteList: {
      invites: components["schemas"]["Invite"][]
    }
    InviteSend: {
      site: components["schemas"]["SiteName"]
      message: string
    }
    /** Represents an FTML syntax tree. */
    FTMLSyntaxTree: { [key: string]: any }
    WikitextObj: {
      wikitext: components["schemas"]["Wikitext"]
    }
    HTMLObj: {
      html: components["schemas"]["HTML"]
    }
    Page: {
      id: components["schemas"]["Reference"]
      slug: components["schemas"]["Slug"]
      category: components["schemas"]["Reference"]
      parent: components["schemas"]["Slug"] | null
      children: components["schemas"]["Slug"][]
      title: string
      tags: components["schemas"]["TagList"]
      score: number
      revision: number
      created: string
      creator: components["schemas"]["UserIdentity"]
      updated: string
      updater: components["schemas"]["UserIdentity"]
      html?: components["schemas"]["HTML"]
      wikitext?: components["schemas"]["Wikitext"]
    }
    Revision: {
      revision: number
      updated: string
      updater: components["schemas"]["UserIdentity"]
      hidden: boolean
      message: string
      flags: ("created" | "content" | "file" | "title" | "revert" | "tag" | "slug")[]
    }
    RevisionHistory: components["schemas"]["Paginated"] & {
      revisions: number
      history: components["schemas"]["Revision"][]
    }
    TagList: string[]
    CastVotePlus: 0 | 1
    CastVotePlusMinus: -1 | 0 | 1
    CastVoteStar: 1 | 2 | 3 | 4 | 5
    CastVote:
      | components["schemas"]["CastVotePlusMinus"]
      | components["schemas"]["CastVoteStar"]
    /**
     * Describes the score/rating of a page.
     *
     * Wikijump has three different ways of rating a page:
     *
     * - `plus`
     * - `plusminus`
     * - `star`
     *
     * You will find the format used in the `format` property.
     */
    Score:
      | {
          format: "plus"
          score: number
          count: number
          totals: {
            "0": number
            "1": number
          }
        }
      | {
          format: "plusminus"
          score: number
          count: number
          totals: {
            "0": number
            "1": number
            "-1": number
          }
        }
      | {
          format: "star"
          score: number
          count: number
          totals: {
            "1": number
            "2": number
            "3": number
            "4": number
            "5": number
          }
        }
    Vote: components["schemas"]["UserIdentity"] &
      (
        | {
            format: "plus"
            time: string
            vote: components["schemas"]["CastVotePlus"]
          }
        | {
            format: "plusminus"
            time: string
            vote: components["schemas"]["CastVotePlusMinus"]
          }
        | {
            format: "star"
            time: string
            vote: components["schemas"]["CastVoteStar"]
          }
      )
    VoterList: components["schemas"]["Paginated"] &
      components["schemas"]["Score"] & {
        voters: components["schemas"]["Vote"][]
      }
    /** A file MIME type and description. */
    Mime: {
      type: string
      description: string
    }
    FileMetadata: {
      id: components["schemas"]["Reference"]
      size: number
      comment: string
      mime: components["schemas"]["Mime"]
      uploader: components["schemas"]["UserIdentity"]
      uploaded: string
      url: string
    }
    FileSiteMetadata: {
      max: number
      used: number
      count: number
      available: number
    }
    FileUpload: {
      filename: string
      comment: string
      content: components["schemas"]["File"]
    }
    ReportSend: {
      reason: string
    }
    Report: {
      id: components["schemas"]["Reference"]
      target?: components["schemas"]["Reference"]
      sender: components["schemas"]["UserIdentity"]
      reason: string
      time: string
    }
    ReportList: {
      reports: components["schemas"]["Report"][]
    }
    Message: {
      id: components["schemas"]["Reference"]
      read: boolean
      archived?: boolean
      time: string
      from: components["schemas"]["UserIdentity"]
      subject: string
      html?: components["schemas"]["HTML"]
    }
    MessageList: components["schemas"]["Paginated"] & {
      messages: components["schemas"]["Message"][]
    }
    MessageSend: {
      subject: string
      wikitext?: components["schemas"]["Wikitext"]
    } & {
      body: unknown
    }
    ForumSortingTypes: "newest" | "oldset"
    ForumCreationContext: {
      by: components["schemas"]["UserIdentity"]
      time: string
    }
    Forum: {
      threadCount: number
      postCount: number
      groups: components["schemas"]["ForumGroup"][]
    }
    ForumGroup: {
      id: components["schemas"]["Reference"]
      title: string
      summary: string
      categories: components["schemas"]["ForumCategory"][]
    }
    ForumCategory: {
      id: components["schemas"]["Reference"]
      group: components["schemas"]["Reference"]
      title: string
      summary: string
      threadCount: number
      postCount: number
      last: components["schemas"]["ForumCreationContext"]
      permissions?: {
        createPosts: ("guest" | "registered" | "member")[]
        createThreads: ("guest" | "registered" | "member")[]
        edit: ("guest" | "registered" | "member" | "author")[]
      } | null
    }
    ForumThread: {
      id: components["schemas"]["Reference"]
      category: components["schemas"]["Reference"]
      group: components["schemas"]["Reference"]
      title: string
      stickied: boolean
      locked: boolean
      postCount: number
      created: components["schemas"]["ForumCreationContext"]
      last: components["schemas"]["ForumCreationContext"]
    }
    ForumPost: {
      id: components["schemas"]["Reference"]
      category: components["schemas"]["Reference"]
      group: components["schemas"]["Reference"]
      thread: components["schemas"]["Reference"]
      parent: components["schemas"]["Reference"] | null
      created: components["schemas"]["ForumCreationContext"]
      revision: number
      replyCount: number
      html?: components["schemas"]["HTML"]
      wikitext?: components["schemas"]["Wikitext"]
      replies?: components["schemas"]["ForumPostList"]
    }
    ForumGroupList: {
      groups: components["schemas"]["ForumGroup"][]
    }
    ForumCategoryList: {
      categories: components["schemas"]["ForumCategory"][]
    }
    ForumThreadList: components["schemas"]["Paginated"] & {
      order: components["schemas"]["ForumSortingTypes"]
      threads: components["schemas"]["ForumThread"][]
    }
    ForumPostList: components["schemas"]["Paginated"] & {
      order: components["schemas"]["ForumSortingTypes"]
      posts: components["schemas"]["ForumPost"][]
    }
    Category: {
      id: components["schemas"]["Reference"]
      name: string
      license: string | null
      ratings: ("disabled" | "plus" | "plusminus" | "star") | null
      discussions: boolean | null
      autonumber: boolean
      permissions: {
        createPages: ("guest" | "registered" | "member")[]
        renamePages: ("guest" | "registered" | "member" | "creator")[]
        deletePages: ("guest" | "registered" | "member" | "creator")[]
        uploadFiles: ("guest" | "registered" | "member" | "creator")[]
        changeFiles: ("guest" | "registered" | "member" | "creator")[]
        showOptions: ("guest" | "registered" | "member" | "creator")[]
        edit: ("guest" | "registered" | "member" | "creator")[]
      } | null
    }
    CategoryDefault: {
      id: components["schemas"]["Reference"]
      name: "_default"
      license: string
      ratings: "disabled" | "plus" | "plusminus" | "star"
      discussions: boolean
      autonumber: false
      permissions: {
        createPages: ("guest" | "registered" | "member")[]
        renamePages: ("guest" | "registered" | "member" | "creator")[]
        deletePages: ("guest" | "registered" | "member" | "creator")[]
        uploadFiles: ("guest" | "registered" | "member" | "creator")[]
        changeFiles: ("guest" | "registered" | "member" | "creator")[]
        showOptions: ("guest" | "registered" | "member" | "creator")[]
        edit: ("guest" | "registered" | "member" | "creator")[]
      }
    }
    CategoryPatch: {
      license?: string | null
      ratings?: ("disabled" | "plus" | "plusminus" | "star") | null
      discussions?: boolean | null
      autonumber?: boolean
      permissions?: {
        createPages?: ("guest" | "registered" | "member")[]
        renamePages?: ("guest" | "registered" | "member" | "creator")[]
        deletePages?: ("guest" | "registered" | "member" | "creator")[]
        uploadFiles?: ("guest" | "registered" | "member" | "creator")[]
        changeFiles?: ("guest" | "registered" | "member" | "creator")[]
        showOptions?: ("guest" | "registered" | "member" | "creator")[]
        edit?: ("guest" | "registered" | "member" | "creator")[]
      } | null
    }
    CategoryDefaultPatch: {
      license?: string
      ratings?: "disabled" | "plus" | "plusminus" | "star"
      discussions?: boolean
      autonumber?: false
      permissions?: {
        createPages?: ("guest" | "registered" | "member")[]
        renamePages?: ("guest" | "registered" | "member" | "creator")[]
        deletePages?: ("guest" | "registered" | "member" | "creator")[]
        uploadFiles?: ("guest" | "registered" | "member" | "creator")[]
        changeFiles?: ("guest" | "registered" | "member" | "creator")[]
        showOptions?: ("guest" | "registered" | "member" | "creator")[]
        edit?: ("guest" | "registered" | "member" | "creator")[]
      }
    }
    CategoryList: components["schemas"]["Paginated"] & {
      categories: components["schemas"]["Category"][]
    }
    SiteSettings: {
      general: {
        address: string
        title: string
        subtitle: string
        language: string
        description: string
        defaultPage: components["schemas"]["Slug"]
        welcomePage: components["schemas"]["Slug"]
      }
      integrations: {
        googleAnalytics: string | null
      }
      security: (
        | {
            policy: "open"
            cloning: boolean
            fileHotLinking: boolean
          }
        | {
            policy: "closed"
            cloning: boolean
            fileHotLinking: boolean
            usersCanApply: boolean
            sitePassword: string
          }
        | {
            policy: "private"
            usersCanApply: boolean
            sitePassword: string
            guestDefaultPage: components["schemas"]["Slug"]
            guestHideNav: boolean
            extraUsers: components["schemas"]["UserIdentity"][]
          }
      ) & {
        guestAllowLinks: boolean
        userLinkMinKarma: boolean
      }
      appearance: {
        userKarma: boolean
        toolbar: {
          top: boolean
          bottom: boolean
        }
      }
      forum: {
        nestingDepth: number
        permissions: {
          createPosts: ("guest" | "registered" | "member")[]
          createThreads: ("guest" | "registered" | "member")[]
          edit: ("guest" | "registered" | "member" | "author")[]
        }
      }
    }
    SiteSettingsPatch: {
      general?: {
        address?: string
        title?: string
        subtitle?: string
        language?: string
        description?: string
        defaultPage?: components["schemas"]["Slug"]
        welcomePage?: components["schemas"]["Slug"]
      }
      integrations?: {
        googleAnalytics?: string | null
      }
      security?: (
        | {
            policy?: "open"
            cloning?: boolean
            fileHotLinking?: boolean
          }
        | {
            policy?: "closed"
            cloning?: boolean
            fileHotLinking?: boolean
            usersCanApply?: boolean
            sitePassword?: string
          }
        | {
            policy?: "private"
            usersCanApply?: boolean
            sitePassword?: string
            guestDefaultPage?: components["schemas"]["Slug"]
            guestHideNav?: boolean
            extraUsers?: components["schemas"]["Reference"][]
          }
      ) & {
        guestAllowLinks?: boolean
        userLinkMinKarma?: boolean
      }
      appearance?: {
        userKarma?: boolean
        toolbar?: {
          top?: boolean
          bottom?: boolean
        }
      }
      forum?: {
        nestingDepth?: number
        permissions?: {
          createPosts?: ("guest" | "registered" | "member")[]
          createThreads?: ("guest" | "registered" | "member")[]
          edit?: ("guest" | "registered" | "member" | "author")[]
        }
      }
    }
    CreateSiteSettings: {
      address: string
      title: string
      subtitle: string
      language: string
      description: string
      defaultPage: components["schemas"]["Slug"]
      welcomePage: components["schemas"]["Slug"]
      policy: "open" | "closed" | "private"
    }
    SiteNewsletter: {
      to: ("member" | "moderator" | "admin")[]
      title: string
      wikitext: components["schemas"]["Wikitext"]
    }
    SiteTransfer: {
      site: components["schemas"]["SiteName"]
      current: components["schemas"]["Reference"]
      next: components["schemas"]["Reference"]
    }
  }
  responses: {
    /** OK */
    UserGet: {
      content: {
        "application/json":
          | components["schemas"]["UserIdentity"]
          | components["schemas"]["UserInfo"]
          | components["schemas"]["UserProfile"]
      }
    }
    /** OK */
    PageGet: {
      content: {
        "application/json":
          | components["schemas"]["Page"]
          | components["schemas"]["WikitextObj"]
          | components["schemas"]["HTMLObj"]
          | components["schemas"]["FTMLSyntaxTree"]
      }
    }
  }
  parameters: {
    /**
     * Specifies how many entries a paginated response should return in a
     * single page.
     */
    Limit: number
    /** Specifies which page a paginated response should return. */
    Cursor: number
    /** Specifies what data to retrieve from the page. Default is to retrieve no data. */
    PageType:
      | "all"
      | "metadata-html"
      | "metadata"
      | "wikitext"
      | "html"
      | "syntaxtree"
      | "none"
    /** Specifies whether to find a page by its ID or slug. */
    PagePathType: "id" | "slug"
    /** Specifies the ID or slug to be used to identify a page. */
    PagePath: components["schemas"]["Slug"] | components["schemas"]["Reference"]
    /** Specifies the level of detail requested for a user. */
    UserDetailsType: "identity" | "info" | "profile"
    /** Specifies whether to find a user by their ID or name. */
    UserPathType: "id" | "name"
    /** Specifies the ID or name to be used to identify a user. */
    UserPath: components["schemas"]["Username"] | components["schemas"]["Reference"]
    /** Specifies the level of detail requested for a message. */
    MessageDetail: "with-html" | "metadata"
    /** Specifies if the request should only return archived messages. */
    MessageArchived: boolean
    /** Specifies the level of detail desired for a requested post. */
    ForumPostDetail: "none" | "metadata" | "with-html" | "full"
    /**
     * Specifies thread/post deletion should result in permanent deletion
     * rather than archival.
     */
    ForumDeletionType: boolean
    /**
     * Specifies the maximum number of replies (sub-posts) included with
     * any retrieved post.
     */
    ForumReplyDepth: number
    /**
     * Endpoints that may return user details will have those details sent
     * with 16x16 avatars. These are meant for display on a frontend. This
     * parameter allows you to disable this behavior if you do not need the avatars.
     */
    Avatars: boolean
  }
}

export interface operations {
  /** INCOMPLETE - STUB */
  queryRequest: {
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Resolves an ID and returns what type of object it refers to. */
  utilResolveID: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            type: components["schemas"]["ReferenceTypes"]
          }
        }
      }
      /** Bad Request */
      400: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Logs in a user. */
  authLogin: {
    responses: {
      /** OK */
      200: unknown
      /** Invalid email or password. */
      400: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          login: components["schemas"]["LoginSpecifier"]
          password: string
          remember?: boolean
        }
      }
    }
  }
  /** Logs the client out. */
  authLogout: {
    responses: {
      /** Unexpected Error */
      500: unknown
      /** OK */
      default: unknown
    }
  }
  /** Gets the authentication state of the client. */
  authCheck: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            sessionValid: boolean
            authed: boolean
            expires: string
          }
        }
      }
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Refreshes the client's access token. */
  authRefresh: {
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /**
   * Registers an account. Does not automatically login. Email validation
   * will be required.
   */
  accountRegister: {
    responses: {
      /** Accepted */
      202: unknown
      /** Email already in use. */
      403: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          username: components["schemas"]["Username"]
          email: components["schemas"]["Email"]
          password: string
        }
      }
    }
  }
  /**
   * Starts the deletion process for an account. Requires additional email
   * validation for the process to complete.
   */
  accountRequestDeletion: {
    responses: {
      /** Accepted */
      202: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Starts the password recovery routine. */
  accountStartRecovery: {
    responses: {
      /** Accepted */
      202: unknown
      /** Email isn't in use. */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          email: components["schemas"]["Email"]
        }
      }
    }
  }
  /** Gets the current email address. */
  accountGetEmail: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            email: components["schemas"]["Email"]
          }
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /**
   * Updates the current email address. Does not immediately change the
   * email, as the change must be verified through a link that is sent to
   * the requested email.
   */
  accountUpdateEmail: {
    responses: {
      /** Accepted */
      202: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          oldEmail: components["schemas"]["Email"]
          newEmail: components["schemas"]["Email"]
        }
      }
    }
  }
  /** Updates the current password. */
  accountUpdatePassword: {
    responses: {
      /** OK */
      200: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          oldPassword: string
          newPassword: string
        }
      }
    }
  }
  /** Gets the current username. */
  accountGetUsername: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            username: components["schemas"]["Username"]
          }
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Updates the current username. */
  accountUpdateUsername: {
    responses: {
      /** OK */
      200: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          username: components["schemas"]["Username"]
        }
      }
    }
  }
  /** Gets the current account settings. */
  accountGetSettings: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AccountSettings"]
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Update (patch) the client's user details. */
  accountUpdateSettings: {
    responses: {
      /** OK */
      200: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountSettingsPatch"]
      }
    }
  }
  /** Gets the client's current notifications. */
  notificationGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["NotificationList"]
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Dismisses all of the client's notifications. */
  notificationDismissAll: {
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets the client's user details. */
  userClientGet: {
    parameters: {
      query: {
        /** Specifies the level of detail requested for a user. */
        detail?: components["parameters"]["UserDetailsType"]
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      200: components["responses"]["UserGet"]
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Update (patch) the client's user details. */
  userClientUpdateProfile: {
    responses: {
      /** OK */
      200: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserProfilePatch"]
      }
    }
  }
  /** Gets the client's avatar. */
  userClientGetAvatar: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/octet-stream": components["schemas"]["File"] | null
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Sets the client's avatar. */
  userClientSetAvatar: {
    responses: {
      /** Created */
      201: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/octet-stream": components["schemas"]["File"]
      }
    }
  }
  /** Removes the client's avatar. */
  userClientRemoveAvatar: {
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets the list of users the client has blocked. */
  userClientGetBlocked: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserBlockedList"]
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets a user's details. */
  userGet: {
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
        /** Specifies the level of detail requested for a user. */
        detail?: components["parameters"]["UserDetailsType"]
      }
    }
    responses: {
      200: components["responses"]["UserGet"]
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /**
   * Resets a user's profile.
   *
   * This endpoint is only available to platform administrators.
   */
  userResetProfile: {
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets a user's avatar. */
  userGetAvatar: {
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/octet-stream": components["schemas"]["File"] | null
        }
      }
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /**
   * Removes a user's avatar.
   *
   * This endpoint is only available to platform administrators.
   */
  userRemoveAvatar: {
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets whether or not the client has a user blocked. */
  userGetBlocked: {
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            blocked: boolean
          }
        }
      }
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Updates whether or not the client has a user blocked. */
  userUpdateBlocked: {
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          blocked: boolean
        }
      }
    }
  }
  /** Gets the sites the client is a member of. */
  membershipGetList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MembershipList"]
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets the sites the client has requested to join. */
  membershipGetApplications: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationSendList"]
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets the sites the client has been invited to join. */
  membershipGetInvites: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["InviteList"]
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets the client membership status for a site. */
  membershipSiteGet: {
    parameters: {
      path: {
        site: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Membership"] | null
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Requests to join a site (application). */
  membershipSiteApply: {
    parameters: {
      path: {
        site: string
      }
    }
    responses: {
      /** Created */
      201: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationSend"]
      }
    }
  }
  /** Leaves a site. */
  membershipSiteLeave: {
    parameters: {
      path: {
        site: string
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets the sites a user is a member of. */
  membershipUserGetList: {
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MembershipList"]
        }
      }
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets a user's membership status for a site. */
  membershipUserSiteGet: {
    parameters: {
      path: {
        site: string
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Membership"] | null
        }
      }
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets the role of a user. */
  membershipUserGetRole: {
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MembershipRole"]
        }
      }
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Sets the role of a user. */
  membershipUserSetRole: {
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["MembershipRole"]
      }
    }
  }
  /** Invites a user to join a site. */
  membershipUserInvite: {
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
    responses: {
      /** Created */
      201: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["InviteSend"]
      }
    }
  }
  /** Creates a new page. */
  pageCreate: {
    responses: {
      /** Created */
      201: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** The requested path cannot be used. */
      403: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          slug: components["schemas"]["Slug"]
          title?: string
          wikitext?: components["schemas"]["Wikitext"]
        }
      }
    }
  }
  /** Gets a page. */
  pageGet: {
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
      query: {
        /**
         * Specifies what data to retrieve from the page. Default is to
         * retrieve no data.
         */
        type?: components["parameters"]["PageType"]
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      200: components["responses"]["PageGet"]
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Deletes a page. */
  pageDelete: {
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Updates a page. */
  pageUpdate: {
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          title?: string
          wikitext?: components["schemas"]["Wikitext"]
        }
      }
    }
  }
  /** Restores a previously deleted page. */
  pageRestore: {
    parameters: {
      path: {
        /** Specifies the ID to be used to identify a page. */
        path: components["schemas"]["Reference"]
      }
    }
    responses: {
      /** Created */
      201: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          slug: components["schemas"]["Slug"]
        }
      }
    }
  }
  /** Changes the path/slug/name of a page. */
  pageRename: {
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** The requested path cannot be used. */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          slug: components["schemas"]["Slug"]
        }
      }
    }
  }
  /** Gets the update/revision history of a page. */
  revisionPageGetHistory: {
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
      query: {
        /** Specifies which page a paginated response should return. */
        cursor?: components["parameters"]["Cursor"]
        /**
         * Specifies how many entries a paginated response should return in
         * a single page.
         */
        limit?: components["parameters"]["Limit"]
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["RevisionHistory"]
        }
      }
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets the page corresponding to a revision. */
  revisionGet: {
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
        revision: number
      }
      query: {
        /**
         * Specifies what data to retrieve from the page. Default is to
         * retrieve no data.
         */
        type?: components["parameters"]["PageType"]
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      200: components["responses"]["PageGet"]
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Resets a page to a past revision. */
  revisionResetToRevision: {
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
        revision: number
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Updates the metadata of a revision. */
  revisionUpdateMetadata: {
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
        revision: number
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          hidden?: boolean
          message?: string
        }
      }
    }
  }
  /** Gets the tags of a page. */
  tagPageGet: {
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            tags: components["schemas"]["TagList"]
          }
        }
      }
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Updates the tags of a page. */
  tagPageUpdate: {
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          tags: components["schemas"]["TagList"]
        }
      }
    }
  }
  /** Gets the score of a page. */
  votePageGetScore: {
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Score"]
        }
      }
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets the voters and votes of a page. */
  votePageGetVoters: {
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
      query: {
        /** Specifies which page a paginated response should return. */
        cursor?: components["parameters"]["Cursor"]
        /**
         * Specifies how many entries a paginated response should return in
         * a single page.
         */
        limit?: components["parameters"]["Limit"]
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["VoterList"]
        }
      }
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets the client's voting state on a page, if any. */
  votePageGet: {
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            vote: components["schemas"]["CastVote"] | null
          }
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Updates/sets the client's voting state on a page. */
  votePageUpdateVote: {
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Page has scoring disabled. */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          vote: components["schemas"]["CastVote"]
        }
      }
    }
  }
  /** Removes the client's voting state on a page. */
  votePageRemoveVote: {
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets metadata on all files attached to a page. */
  filePageGetMetadata: {
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            files: components["schemas"]["FileMetadata"][]
          }
        }
      }
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Adds a new file to a page. */
  filePageAdd: {
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
    }
    responses: {
      /** Created */
      201: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FileUpload"]
      }
    }
  }
  /**
   * Gets metadata on the files attached directly to the site instance.
   *
   * This does not include files attached to *pages*.
   */
  fileSiteGetMetadata: {
    parameters: {
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Paginated"] & {
            files: components["schemas"]["FileMetadata"][]
          }
        }
      }
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Adds a new file to a site instance. */
  fileSiteAdd: {
    responses: {
      /** Created */
      201: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FileUpload"]
      }
    }
  }
  /** Gets a file. */
  fileGet: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/octet-stream": components["schemas"]["File"]
        }
      }
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Deletes a file. */
  fileDelete: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets the site's file-system metadata, e.g. remaining file space. */
  fileGetSiteMetadata: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["FileSiteMetadata"]
        }
      }
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets a file's metadata. */
  fileGetMetadata: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["FileMetadata"]
        }
      }
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets the reports against a user. */
  reportUserGet: {
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ReportList"]
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Reports a user. */
  reportUserSend: {
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
    responses: {
      /** Created */
      201: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReportSend"]
      }
    }
  }
  /** Gets a page's reports. */
  reportPageGet: {
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ReportList"]
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Reports a page. */
  reportPageSend: {
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
    }
    responses: {
      /** Created */
      201: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReportSend"]
      }
    }
  }
  /** Gets a report. */
  reportGet: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report"]
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /**
   * Gets the reports against a site.
   *
   * This endpoint is only available to platform administrators.
   */
  abuseSiteGet: {
    parameters: {
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ReportList"]
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Reports a site. */
  abuseSiteSend: {
    responses: {
      /** Created */
      201: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReportSend"]
      }
    }
  }
  /**
   * Gets the reports against a user.
   *
   * This endpoint is only available to platform administrators.
   */
  abuseUserGet: {
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ReportList"]
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Reports a user. */
  abuseUserSend: {
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
    responses: {
      /** Created */
      201: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReportSend"]
      }
    }
  }
  /**
   * Gets a page's reports.
   *
   * This endpoint is only available to platform administrators.
   */
  abusePageGet: {
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ReportList"]
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Reports a page. */
  abusePageSend: {
    parameters: {
      path: {
        /** Specifies whether to find a page by its ID or slug. */
        path_type: components["parameters"]["PagePathType"]
        /** Specifies the ID or slug to be used to identify a page. */
        path: components["parameters"]["PagePath"]
      }
    }
    responses: {
      /** Created */
      201: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReportSend"]
      }
    }
  }
  /**
   * Gets a report.
   *
   * This endpoint is only available to platform administrators.
   */
  abuseGet: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report"]
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets all of the client's messages. */
  messageGetList: {
    parameters: {
      query: {
        /** Specifies which page a paginated response should return. */
        cursor?: components["parameters"]["Cursor"]
        /**
         * Specifies how many entries a paginated response should return in
         * a single page.
         */
        limit?: components["parameters"]["Limit"]
        /** Specifies the level of detail requested for a message. */
        detail?: components["parameters"]["MessageDetail"]
        /** Specifies if the request should only return archived messages. */
        archived?: components["parameters"]["MessageArchived"]
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MessageList"]
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets a message. */
  messageGet: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
      query: {
        /** Specifies the level of detail requested for a message. */
        detail?: components["parameters"]["MessageDetail"]
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Message"]
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Deletes a message. */
  messageDelete: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Updates the metadata of a message, such as read or unread. */
  messageUpdate: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          read?: boolean
          archived?: boolean
        }
      }
    }
  }
  /** Messages a user. */
  messageSend: {
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
    responses: {
      /** Created */
      201: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["MessageSend"]
      }
    }
  }
  /** Gets the groups and categories of a forum. */
  forumGet: {
    parameters: {
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Forum"]
        }
      }
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets the groups of a forum. */
  forumGroupGetList: {
    parameters: {
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ForumGroupList"]
        }
      }
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets a group. */
  forumGroupGet: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ForumGroup"]
        }
      }
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Creates a new category inside of a group. */
  forumGroupAddCategory: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
    responses: {
      /** Created */
      201: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          title?: string
          summary?: string
        }
      }
    }
  }
  /** Deletes a group. */
  forumGroupDelete: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Updates a group. */
  forumGroupUpdate: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          title?: string
          summary?: string
          order?: components["schemas"]["Reference"][]
        }
      }
    }
  }
  /** Gets the categories of a group. */
  forumGroupGetCategories: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ForumCategoryList"]
        }
      }
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets the categories of a forum. */
  forumCategoryGetList: {
    parameters: {
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ForumCategoryList"]
        }
      }
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets a category. */
  forumCategoryGet: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ForumCategory"]
        }
      }
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Creates a new thread inside of a category. */
  forumCategoryAddThread: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
    responses: {
      /** Created */
      201: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          title?: string
          summary?: string
        }
      }
    }
  }
  /** Deletes a category. */
  forumCategoryDelete: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Updates a category. */
  forumCategoryUpdate: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          title?: string
          summary?: string
        }
      }
    }
  }
  /** Gets the threads of a category. */
  forumCategoryGetThreads: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
      query: {
        /** Specifies which page a paginated response should return. */
        cursor?: components["parameters"]["Cursor"]
        /**
         * Specifies how many entries a paginated response should return in
         * a single page.
         */
        limit?: components["parameters"]["Limit"]
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ForumThreadList"]
        }
      }
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets a thread. */
  forumThreadGet: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ForumThread"]
        }
      }
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Creates a new post inside of a thread. */
  forumThreadAddPost: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
    responses: {
      /** Created */
      201: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          title?: string
          wikitext?: components["schemas"]["Wikitext"]
        }
      }
    }
  }
  /** Deletes a thread. */
  forumThreadDelete: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
      query: {
        /**
         * Specifies thread/post deletion should result in permanent
         * deletion rather than archival.
         */
        permanent?: components["parameters"]["ForumDeletionType"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Updates a thread. */
  forumThreadUpdate: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          title?: string
          summary?: string
          stickied?: boolean
          locked?: boolean
        }
      }
    }
  }
  /** Gets the posts of a thread. */
  forumThreadGetPosts: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
      query: {
        /** Specifies which page a paginated response should return. */
        cursor?: components["parameters"]["Cursor"]
        /**
         * Specifies how many entries a paginated response should return in
         * a single page.
         */
        limit?: components["parameters"]["Limit"]
        /** Specifies the level of detail desired for a requested post. */
        detail?: components["parameters"]["ForumPostDetail"]
        /**
         * Specifies the maximum number of replies (sub-posts) included
         * with any retrieved post.
         */
        depth?: components["parameters"]["ForumReplyDepth"]
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ForumPostList"]
        }
      }
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets a post. */
  forumPostGet: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
      query: {
        /** Specifies the level of detail desired for a requested post. */
        detail?: components["parameters"]["ForumPostDetail"]
        /**
         * Specifies the maximum number of replies (sub-posts) included
         * with any retrieved post.
         */
        depth?: components["parameters"]["ForumReplyDepth"]
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ForumPost"]
        }
      }
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Replies to a post with another post. */
  forumPostReply: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
    responses: {
      /** Created */
      201: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          title?: string
          wikitext?: components["schemas"]["Wikitext"]
        }
      }
    }
  }
  /** Deletes a post. */
  forumPostDelete: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
      query: {
        /**
         * Specifies thread/post deletion should result in permanent
         * deletion rather than archival.
         */
        permanent?: components["parameters"]["ForumDeletionType"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Updates a post. */
  forumPostUpdate: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          title?: string
          wikitext?: components["schemas"]["Wikitext"]
        }
      }
    }
  }
  /** Gets the replies to a post. */
  forumPostGetReplies: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
      query: {
        /** Specifies which page a paginated response should return. */
        cursor?: components["parameters"]["Cursor"]
        /**
         * Specifies how many entries a paginated response should return in
         * a single page.
         */
        limit?: components["parameters"]["Limit"]
        /** Specifies the level of detail desired for a requested post. */
        detail?: components["parameters"]["ForumPostDetail"]
        /**
         * Specifies the maximum number of replies (sub-posts) included
         * with any retrieved post.
         */
        depth?: components["parameters"]["ForumReplyDepth"]
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ForumPostList"]
        }
      }
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets the update/revision history of a post. */
  forumPostRevisionGetHistory: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
      query: {
        /** Specifies which page a paginated response should return. */
        cursor?: components["parameters"]["Cursor"]
        /**
         * Specifies how many entries a paginated response should return in
         * a single page.
         */
        limit?: components["parameters"]["Limit"]
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["RevisionHistory"]
        }
      }
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets the post corresponding to a revision. */
  forumPostRevisionGet: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
        revision: number
      }
      query: {
        /**
         * Endpoints that may return user details will have those details
         * sent with 16x16 avatars. These are meant for display on a
         * frontend. This parameter allows you to disable this behavior if
         * you do not need the avatars.
         */
        avatars?: components["parameters"]["Avatars"]
        /** Specifies the level of detail desired for a requested post. */
        detail?: components["parameters"]["ForumPostDetail"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ForumPost"]
        }
      }
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Resets a forum post to a past revision. */
  forumPostResetToRevision: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
        revision: number
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Updates the metadata of a revision. */
  forumPostRevisionUpdateMetadata: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
        revision: number
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          hidden?: boolean
          message?: string
        }
      }
    }
  }
  /** Kicks a user from a site. */
  moderationKick: {
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          reason: string
        }
      }
    }
  }
  /** Gets the list of users banned from a site. */
  moderationBanGetList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            banned: {
              user: components["schemas"]["UserIdentity"]
              until: string | null
              reason: string
            }[]
          }
        }
      }
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets if a user is banned. */
  moderationBanGet: {
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            banned: boolean
            until: string | null
            reason: string
          }
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Bans a user. Providing `null` for `until` describes a perma-ban. */
  moderationBan: {
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": {
          until: string | null
          reason: string
        }
      }
    }
  }
  /** Unbans a user, if they were banned to begin with. */
  moderationUnban: {
    parameters: {
      path: {
        /** Specifies whether to find a user by their ID or name. */
        path_type: components["parameters"]["UserPathType"]
        /** Specifies the ID or name to be used to identify a user. */
        path: components["parameters"]["UserPath"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets the list of categories on a site. */
  categoryGetList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CategoryList"]
        }
      }
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets the default category. */
  categoryDefaultGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CategoryDefault"]
        }
      }
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Update (patch) the default category. */
  categoryDefaultPatch: {
    responses: {
      /** OK */
      200: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoryDefaultPatch"]
      }
    }
  }
  /** Gets a category. */
  categoryGet: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Category"]
        }
      }
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Update (patch) a category. */
  categoryPatch: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoryPatch"]
      }
    }
  }
  /** Gets the site's settings. */
  siteSettingsGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SiteSettings"]
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Update (patch) the site's settings. */
  siteSettingsPatch: {
    responses: {
      /** OK */
      200: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["SiteSettingsPatch"]
      }
    }
  }
  /** Gets the site's pending applications. */
  siteApplicationGetList: {
    parameters: {
      query: {
        /** Specifies which page a paginated response should return. */
        cursor?: components["parameters"]["Cursor"]
        /**
         * Specifies how many entries a paginated response should return in
         * a single page.
         */
        limit?: components["parameters"]["Limit"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationList"]
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets an application. */
  siteApplicationGet: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Application"]
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Accepts an application. */
  siteApplicationAccept: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Rejects an application. */
  siteApplicationReject: {
    parameters: {
      path: {
        id: components["schemas"]["Reference"]
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Not Found */
      404: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Gets a backup of the site. */
  siteBackupGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/octet-stream": components["schemas"]["File"]
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Creates a new site. */
  siteCreate: {
    responses: {
      /** Created */
      201: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSiteSettings"]
      }
    }
  }
  /**
   * Starts the deletion process for the site. Requires additional email
   * validation for the process to complete.
   */
  siteRequestDeletion: {
    responses: {
      /** Accepted */
      202: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Clones the current site and creates a new one. */
  siteClone: {
    responses: {
      /** Created */
      201: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSiteSettings"]
      }
    }
  }
  /** Gets the site's current notifications. */
  siteNotificationGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["NotificationList"]
        }
      }
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Dismisses all of the site's notifications. */
  siteNotificationDismissAll: {
    responses: {
      /** OK */
      200: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Unexpected Error */
      500: unknown
    }
  }
  /** Sends a site newsletter. */
  siteNewsletterSend: {
    responses: {
      /** Created */
      201: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["SiteNewsletter"]
      }
    }
  }
  /** Transfers the site master-admin status to another user. */
  siteTransfer: {
    responses: {
      /** Accepted */
      202: unknown
      /** Bad Request */
      400: unknown
      /** Missing or invalid authentication credentials. */
      401: unknown
      /** Forbidden */
      403: unknown
      /** Unexpected Error */
      500: unknown
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["SiteTransfer"]
      }
    }
  }
}

export interface external {}
