//! SeaORM Entity. Generated by sea-orm-codegen 0.4.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "page")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub page_id: i64,
    pub site_id: Option<i32>,
    pub category_id: Option<i32>,
    pub parent_page_id: Option<i32>,
    pub revision_id: Option<i32>,
    pub metadata_id: Option<i32>,
    pub revision_number: i32,
    pub title: Option<String>,
    pub unix_name: Option<String>,
    pub date_created: Option<DateTime>,
    pub date_last_edited: Option<DateTime>,
    pub last_edit_user_id: Option<i32>,
    pub last_edit_user_string: Option<String>,
    pub thread_id: Option<i32>,
    pub owner_user_id: Option<i32>,
    pub blocked: bool,
    pub rate: i32,
    #[sea_orm(column_type = "Custom(\"jsonb\".to_owned())")]
    pub tags: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentPageId",
        to = "Column::PageId",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    SelfRef,
    #[sea_orm(
        belongs_to = "super::site::Entity",
        from = "Column::SiteId",
        to = "super::site::Column::SiteId",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Site,
    #[sea_orm(has_many = "super::file::Entity")]
    File,
    #[sea_orm(has_many = "super::forum_thread::Entity")]
    ForumThread,
    #[sea_orm(has_many = "super::front_forum_feed::Entity")]
    FrontForumFeed,
    #[sea_orm(has_many = "super::page_edit_lock::Entity")]
    PageEditLock,
    #[sea_orm(has_many = "super::page_rate_vote::Entity")]
    PageRateVote,
    #[sea_orm(has_many = "super::watched_page::Entity")]
    WatchedPage,
}

impl Related<super::site::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Site.def()
    }
}

impl Related<super::file::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::File.def()
    }
}

impl Related<super::forum_thread::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ForumThread.def()
    }
}

impl Related<super::front_forum_feed::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FrontForumFeed.def()
    }
}

impl Related<super::page_edit_lock::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PageEditLock.def()
    }
}

impl Related<super::page_rate_vote::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PageRateVote.def()
    }
}

impl Related<super::watched_page::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WatchedPage.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
