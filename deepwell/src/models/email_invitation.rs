//! SeaORM Entity. Generated by sea-orm-codegen 0.4.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "email_invitation")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub invitation_id: i64,
    pub hash: Option<String>,
    pub email: Option<String>,
    pub name: Option<String>,
    pub user_id: Option<i32>,
    pub site_id: Option<i32>,
    pub become_member: bool,
    pub to_contacts: Option<bool>,
    pub message: Option<String>,
    pub attempts: i32,
    pub accepted: bool,
    pub delivered: bool,
    pub date: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::site::Entity",
        from = "Column::SiteId",
        to = "super::site::Column::SiteId",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Site,
}

impl Related<super::site::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Site.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
