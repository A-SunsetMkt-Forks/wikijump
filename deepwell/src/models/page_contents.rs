//! SeaORM Entity. Generated by sea-orm-codegen 0.4.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "page_contents")]
pub struct Model {
    pub created_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub revision_id: i64,
    #[sea_orm(column_type = "Text")]
    pub wikitext: String,
    #[sea_orm(column_type = "Text")]
    pub compiled_html: String,
    pub generator: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::page_revision::Entity",
        from = "Column::RevisionId",
        to = "super::page_revision::Column::RevisionId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    PageRevision,
}

impl Related<super::page_revision::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PageRevision.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
