//! SeaORM Entity. Generated by sea-orm-codegen 0.5.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "site")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub site_id: i64,
    pub name: Option<String>,
    pub subtitle: Option<String>,
    #[sea_orm(unique)]
    pub unix_name: Option<String>,
    pub description: Option<String>,
    pub language: String,
    pub date_created: Option<DateTime>,
    pub custom_domain: Option<String>,
    pub visible: bool,
    pub default_page: String,
    pub private: bool,
    pub deleted: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::file::Entity")]
    File,
    #[sea_orm(has_many = "super::category::Entity")]
    Category,
    #[sea_orm(has_many = "super::page::Entity")]
    Page,
    #[sea_orm(has_many = "super::site_settings::Entity")]
    SiteSettings,
    #[sea_orm(has_many = "super::user_block::Entity")]
    UserBlock,
}

impl Related<super::file::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::File.def()
    }
}

impl Related<super::category::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Category.def()
    }
}

impl Related<super::page::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Page.def()
    }
}

impl Related<super::site_settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SiteSettings.def()
    }
}

impl Related<super::user_block::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserBlock.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
